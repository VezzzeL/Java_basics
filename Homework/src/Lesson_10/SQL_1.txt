Restricting and Sorting Data{
1)	DESCRIBE Employees;
2)	SELECT * FROM Employees WHERE FIRST_NAME='David';
3)	SELECT * FROM Employees WHERE JOB_ID='IT_PROG';
4)  SELECT * FROM Employees WHERE DEPARTMENT_ID=50 AND SALARY>4000;
5)	SELECT * FROM Employees WHERE DEPARTMENT_ID=20 AND DEPARTMENT_ID=30;
6)	SELECT * FROM Employees WHERE FIRST_NAME LIKE '_a';
7)	SELECT * FROM Employees WHERE DEPARTMENT_ID=50 AND DEPARTMENT_ID=80 AND COMMISION_PCT IS NOT NULL;
8)	SELECT * FROM Employees WHERE FIRST_NAME LIKE '%n%n%';
9)	SELECT * FROM Employees WHERE LENGTH(FIRST_NAME)>4;
10)	SELECT * FROM Employees WHERE SALARY BETWEEN 8000 AND 9000;
}
Using Conversion Functions and Conditional Expressions{
1)	SELECT * FROM Employees WHERE TO_CHAR (HIRE_DATE, 'DD') = '01';
2)	SELECT * FROM Employees WHERE TO_CHAR (HIRE_DATE, 'YYYY') = '2008';
3)	SELECT TO_CHAR(SYSDATE, 'fm""Tomorrow is ""Ddspth ""day of"" Month') FROM DUAL;;
4)	SELECT FIRST_NAME, TO_CHAR (HIRE_DATE, 'fmddth ""of"" Month, YYYY') FROM Employees;
5)	SELECT FIRST_NAME, TO_CHAR (SALARY + SALARY * 0.20, 'fm$999,999.00') FROM Employees;
6)	SELECT * FROM Employees WHERE TO_CHAR(HIRE_DATE,'MM.YYYY') = '02.2007';
7)	SELECT SYSDATE, SYSDATE + 1 / (24 * 60 * 60), SYSDATE + 1 / (24 * 60), SYSDATE + 1 / 24, SYSDATE + 1, ADD_MONTHS(SYSDATE, 1), ADD_MONTHS(SYSDATE, 12) FROM DUAL;
8)	SELECT FIRST_NAME, TO_CHAR (SALARY + SALARY * NVL (COMMISSION_PCT, 0), 'fm$99,999.00') FROM Employees;
9)	SELECT FIRST_NAME, COMMISSION_PCT, NVL2(COMMISSION_PCT, 'Yes', 'No') FROM Employees;
10)	SELECT FIRST_NAME, SALARY, CASE
				WHEN salary < 5000 THEN 'Low'
				WHEN salary >= 5000 AND salary < 10000 THEN 'Normal'
				ELSE 'High'
				END SALARY_LEVEL 
			FROM Employees;
}
Reporting Aggregated Data Using the Group Functions{
1)  SELECT DEPARTMENT_ID, MIN(SALARY) minSalary, MAX(SALARY) maxSalary, MIN(HIRE_DATE) minHD, MAX(HIRE_DAYE) maxHD, COUNT (*) FROM Employees
	GROUP BY DEPARTMENT_ID order by count(*)DESC;
2)	SELECT SUBSTR (FIRST_NAME, 1, 1) firstChar, COUNT (*) FROM Employees
	GROUP BY SUBSTR (FIRST_NAME, 1, 1) HAVING COUNT (*) > 1 ORDER BY 2 DESC;
3)	SELECT DEPARTMENT_ID, SALARY, COUNT (*) FROM Employees
	GROUP BY DEPARTMENT_ID, SALARY HAVING COUNT (*) > 1;
4)	SELECT TO_CHAR (HIRE_DATE, 'Day') day, COUNT (*) FROM Employees
	GROUP BY TO_CHAR (HIRE_DATE, 'Day') ORDER BY 2 DESC;
5)	SELECT TO_CHAR (HIRE_DATE, 'YYYY') year, COUNT (*) FROM Employees
	GROUP BY TO_CHAR (HIRE_DATE, 'YYYY');
}
Displaying Data from Multiple Tables Using Joins{
1)  SELECT REGION_NAME, COUNT (*) FROM Employees e
         JOIN DEPARTMENTS d ON (e.DEPARTMENT_ID = d.DEPARTMENT_ID)
         JOIN LOCATIONS l ON (d.LOCATION_ID = l.LOCATION_ID)
         JOIN COUNTRIES c ON (l.COUNTRY_ID = c.COUNTRY_ID)
         JOIN REGIONS r ON (c.REGION_ID = r.REGION_ID)
	GROUP BY REGION_NAME;
2)  SELECT MAN.FIRST_NAME, COUNT (*) FROM Employees EMP 
		JOIN Employees MAN ON (EMP.MANAGER_ID = MAN.EMPLOYEE_ID)
	GROUP BY MAN.FIRST_NAME HAVING COUNT (*) > 6;
3)	SELECT EMP.FIRST_NAME FROM Employees EMP
       LEFT JOIN Employees MAN ON (EMP.MANAGER_ID = MAN.EMPLOYEE_ID)
		WHERE MAN.FIRST_NAME IS NULL;
	SELECT FIRST_NAME FROM Employees WHERE MANAGER_ID IS NULL;
4)	SELECT FIRST_NAME,
		NVL2(
           END_DATE,
           TO_CHAR (END_DATE, 'fm""Left the company at"" DD ""of"" Month, YYYY'),'Currently Working')
		   status
	FROM Employees E LEFT JOIN Job_history J ON (E.EMPLOYEE_ID = J.EMPLOYEE_ID);	
5)	SELECT EMP.* FROM Employees EMP JOIN Employees MAN ON (EMP.MANAGER_ID = MAN.EMPLOYEE_ID)
		WHERE TO_CHAR (MAN.HIRE_DATE, 'YYYY') = '2005'
			  AND EMP.HIRE_DATE < TO_DATE ('01012005', 'DDMMYYYY');
}
Using Subqueries to Solve Queries{
1)	SELECT * FROM Employees WHERE LENGTH (FIRST_NAME) = (SELECT MAX (LENGTH (FIRST_NAME)) FROM Employees);
2)	SELECT * FROM Employees WHERE SALARY > (SELECT AVG (SALARY) FROM Employees);
3)	SELECT * FROM Employees WHERE MANAGER_ID IN (SELECT EMPLOYEE_ID FROM Employees WHERE SALARY > 15000)
4)	SELECT * FROM Employees WHERE EMPLOYEE_ID NOT IN (SELECT MANAGER_ID FROM Employees WHERE MANAGER_ID IS NOT NULL)
5)	SELECT * FROM Employees E WHERE (SELECT COUNT (*) FROM Employees WHERE MANAGER_ID = E.EMPLOYEE_ID) > 6;
}
